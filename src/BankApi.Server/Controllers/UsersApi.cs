/*
 * BankApi
 *
 * Developer challenge using Swagger and ASP.NET Core
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using BankApi.Logic.BankConnections;
using BankApi.Logic.Data.Repositories;
using BankApi.Server.Models;
using BankApi.Server.Utilities;
using IO.Swagger.Server.Attributes;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace BankApi.Server.Controllers
{
    /// <summary>
    ///     Provides API endpoints for the /users route
    /// </summary>
    public class UsersApiController : Controller
    {
        private readonly IBankAccountRepository _accountRepository;
        private readonly IBankConnectionManager _connectionManager;
        private readonly IUserRepository _userRepository;

        /// <summary>
        ///     Initializes the UsersApiController
        /// </summary>
        /// <param name="userRepository">Repository used to access AppUser information</param>
        /// <param name="accountRepository">Repository used to access BankAccount information</param>
        /// <param name="connectionManager">Connection manager used to query remote banking services</param>
        public UsersApiController(
            IUserRepository userRepository,
            IBankAccountRepository accountRepository,
            IBankConnectionManager connectionManager
        )
        {
            _userRepository = userRepository;
            _accountRepository = accountRepository;
            _connectionManager = connectionManager;
        }

        /// <summary>
        ///     Creates a new user
        /// </summary>
        /// <param name="userData">User data for the user to be created</param>
        /// <response code="200">Successfully created user account</response>
        /// <response code="400">New user data invalid</response>
        /// <response code="404">Bank account not found</response>
        /// <response code="409">Account already exists</response>
        [HttpPost]
        [Route("/api/v1/users")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1UsersCreate")]
        [SwaggerResponse(200, typeof(UserViewModel), "Successfully created user account")]
        [SwaggerResponse(400, typeof(ErrorViewModel), "New user data invalid")]
        [SwaggerResponse(404, typeof(ErrorViewModel), "Bank account not found")]
        [SwaggerResponse(409, typeof(ErrorViewModel), "Account already exists")]
        public virtual async Task<IActionResult> ApiV1UsersCreate(
            [FromBody] CreateUserViewModel userData
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserViewModel));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorViewModel));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorViewModel));

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorViewModel));

            string exampleJson = null;
            exampleJson = "{\r\n  \"user_id\" : 1,\r\n  \"username\" : \"John Doe\"\r\n}";

            var example = exampleJson != null
                ? JsonConvert.DeserializeObject<UserViewModel>(exampleJson)
                : default(UserViewModel);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///     Gets a list of all users in the system
        /// </summary>
        /// <response code="200">Successfully retrieved list of users</response>
        [HttpGet]
        [Route("/api/v1/users")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1UsersGetAll")]
        [SwaggerResponse(200, typeof(List<UserViewModel>), "Successfully retrieved list of users")]
        public virtual IActionResult ApiV1UsersGetAll()
        {
            var users = _userRepository.GetAllUsers().ToList();

            var models = users
                .Select(ViewModelUtility.CreateUserViewModel)
                .ToList();

            return Ok(models);
        }

        /// <summary>
        ///     Gets details about a specific user
        /// </summary>
        /// <param name="user_id">Id of the user to return</param>
        /// <response code="200">Successfully retrieved user data</response>
        /// <response code="400">user_id is invalid</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/api/v1/users/{user_id}")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1UsersGetById")]
        [SwaggerResponse(200, typeof(UserViewModel), "Successfully retrieved user data")]
        [SwaggerResponse(400, typeof(ErrorViewModel), "user_id is invalid")]
        [SwaggerResponse(404, typeof(ErrorViewModel), "User not found")]
        public virtual IActionResult ApiV1UsersGetById(
            [FromRoute] [Required] int? user_id
        )
        {
            if (!user_id.HasValue)
                return ApiResponseUtility.ApiError(
                    HttpStatusCode.BadRequest,
                    "user_id is required"
                );

            var user = _userRepository.GetUserById(user_id.Value);

            if (user == null)
                return ApiResponseUtility.ApiError(
                    HttpStatusCode.NotFound,
                    $"User with id {user_id} does not exist"
                );

            var model = ViewModelUtility.CreateUserViewModel(user);

            return Ok(model);
        }
    }
}