/*
 * BankApi
 *
 * Developer challenge using Swagger and ASP.NET Core
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Net;
using System.Threading.Tasks;
using BankApi.Logic.AccountData;
using BankApi.Logic.Data.Repositories;
using BankApi.Server.Models;
using BankApi.Server.Utilities;
using IO.Swagger.Server.Attributes;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace BankApi.Server.Controllers
{
    /// <summary>
    ///     Provides API endpoints for the /accounts route
    /// </summary>
    public class AccountsApiController : Controller
    {
        private readonly IAccountDataProvider _accountDataProvider;
        private readonly IBankAccountRepository _accountRepository;

        /// <summary>
        ///     Initializes the UserAccountsApiController
        /// </summary>
        /// <param name="accountRepository">Repository used to access BankAccount information</param>
        /// <param name="accountDataProvider">Data provider which can fetch data for bank accounts</param>
        public AccountsApiController(IBankAccountRepository accountRepository, IAccountDataProvider accountDataProvider)
        {
            _accountRepository = accountRepository;
            _accountDataProvider = accountDataProvider;
        }

        /// <summary>
        ///     Gets details about a specific account
        /// </summary>
        /// <param name="account_id">Id of the account to return</param>
        /// <response code="200">Successfully retrieved account data</response>
        /// <response code="400">account_id is invalid</response>
        /// <response code="404">Account not found</response>
        [HttpGet]
        [Route("/api/v1/accounts/{account_id}")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsGetById")]
        [SwaggerResponse(200, typeof(AccountDetailsViewModel), "Successfully retrieved account data")]
        [SwaggerResponse(400, typeof(ErrorViewModel), "account_id is invalid")]
        [SwaggerResponse(404, typeof(ErrorViewModel), "Account not found")]
        public virtual async Task<IActionResult> ApiV1AccountsGetById(
            [FromRoute] [Required] int? account_id
        )
        {
            if (!account_id.HasValue)
                return ApiResponseUtility.ApiError(
                    HttpStatusCode.BadRequest,
                    "account_id is required"
                );

            var account = _accountRepository.GetAccountById(account_id.Value);

            if (account == null)
                return ApiResponseUtility.ApiError(
                    HttpStatusCode.NotFound,
                    $"Bank account with id '{account_id}' does not exist"
                );

            // when we are fetching account details for a known account, we use the account data service
            // rather than accessing the connection directly. this allows the service to perform caching
            // and additional post-processing on the account data before it is returned to the user
            var accountResult = await _accountDataProvider.GetAccountDetails(account.BankId, account.AccountNumber);

            if (!accountResult.Success)
            {
                var error = new ErrorViewModel
                {
                    Status = accountResult.StatusCode,
                    Message = accountResult.Error.ErrorMessage,
                    ErrorCode = accountResult.Error.ErrorCode
                };

                return new ObjectResult(error)
                {
                    StatusCode = accountResult.StatusCode
                };
            }

            var model = ViewModelUtility.CreateAccountDetailsViewModel(account, accountResult.Result);

            return Ok(model);
        }

        /// <summary>
        ///     Gets a list of transactions for the specified account
        /// </summary>
        /// <param name="account_id">Id of the bank account to fetch transactions for</param>
        /// <response code="200">Successfully retrieved account data</response>
        /// <response code="400">account_id is invalid</response>
        /// <response code="404">Account not found</response>
        [HttpGet]
        [Route("/api/v1/accounts/{account_id}/transactions")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsGetTransactionsByAccountId")]
        [SwaggerResponse(200, typeof(List<TransactionViewModel>), "Successfully retrieved account data")]
        [SwaggerResponse(400, typeof(ErrorViewModel), "account_id is invalid")]
        [SwaggerResponse(404, typeof(ErrorViewModel), "Account not found")]
        public virtual async Task<IActionResult> ApiV1AccountsGetTransactionsByAccountId(
            [FromRoute] [Required] int? account_id
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TransactionViewModel>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorViewModel));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorViewModel));

            string exampleJson = null;
            exampleJson =
                "[ {\r\n  \"amount\" : 5.99,\r\n  \"description\" : \"Amazon UK\",\r\n  \"date\" : \"2018-04-23T00:00:00+00:00\"\r\n}, {\r\n  \"amount\" : 40,\r\n  \"description\" : \"Cashlink\",\r\n  \"date\" : \"2018-04-20T17:50:23+00:00\"\r\n} ]";

            var example = exampleJson != null
                ? JsonConvert.DeserializeObject<List<TransactionViewModel>>(exampleJson)
                : default(List<TransactionViewModel>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}