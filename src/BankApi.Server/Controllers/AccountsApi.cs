/*
 * BankApi
 *
 * Developer challenge using Swagger and ASP.NET Core
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using BankApi.Server.Models;
using IO.Swagger.Server.Attributes;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace BankApi.Server.Controllers
{
    /// <summary>
    ///     Provides API endpoints for the /accounts route
    /// </summary>
    public class AccountsApiController : Controller
    {
        /// <summary>
        ///     Gets details about a specific account
        /// </summary>
        /// <param name="account_id">Id of the account to return</param>
        /// <response code="200">Successfully retrieved account data</response>
        /// <response code="400">account_id is invalid</response>
        /// <response code="404">Account not found</response>
        [HttpGet]
        [Route("/api/v1/accounts/{account_id}")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsGetById")]
        [SwaggerResponse(200, typeof(AccountDetailsViewModel), "Successfully retrieved account data")]
        [SwaggerResponse(400, typeof(ErrorViewModel), "account_id is invalid")]
        [SwaggerResponse(404, typeof(ErrorViewModel), "Account not found")]
        public virtual IActionResult ApiV1AccountsGetById(
            [FromRoute] [Required] int? account_id
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccountDetailsViewModel));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorViewModel));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorViewModel));

            string exampleJson = null;
            exampleJson =
                "{\r\n  \"account_id\" : 1,\r\n  \"bank_id\" : \"BizfiBank\",\r\n  \"account_name\" : \"Current Account\",\r\n  \"account_number\" : \"00112233\",\r\n  \"sort_code\" : \"079046\",\r\n  \"current_balance\" : \"350,\",\r\n  \"overdraft_limit\" : 50\r\n}";

            var example = exampleJson != null
                ? JsonConvert.DeserializeObject<AccountDetailsViewModel>(exampleJson)
                : default(AccountDetailsViewModel);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        ///     Gets a list of transactions for the specified account
        /// </summary>
        /// <param name="account_id">Id of the bank account to fetch transactions for</param>
        /// <response code="200">Successfully retrieved account data</response>
        /// <response code="400">account_id is invalid</response>
        /// <response code="404">Account not found</response>
        [HttpGet]
        [Route("/api/v1/accounts/{account_id}/transactions")]
        [ValidateModelState]
        [SwaggerOperation("ApiV1AccountsGetTransactionsByAccountId")]
        [SwaggerResponse(200, typeof(List<TransactionViewModel>), "Successfully retrieved account data")]
        [SwaggerResponse(400, typeof(ErrorViewModel), "account_id is invalid")]
        [SwaggerResponse(404, typeof(ErrorViewModel), "Account not found")]
        public virtual IActionResult ApiV1AccountsGetTransactionsByAccountId(
            [FromRoute] [Required] int? account_id
        )
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<TransactionViewModel>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorViewModel));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorViewModel));

            string exampleJson = null;
            exampleJson =
                "[ {\r\n  \"amount\" : 5.99,\r\n  \"description\" : \"Amazon UK\",\r\n  \"date\" : \"2018-04-23T00:00:00+00:00\"\r\n}, {\r\n  \"amount\" : 40,\r\n  \"description\" : \"Cashlink\",\r\n  \"date\" : \"2018-04-20T17:50:23+00:00\"\r\n} ]";

            var example = exampleJson != null
                ? JsonConvert.DeserializeObject<List<TransactionViewModel>>(exampleJson)
                : default(List<TransactionViewModel>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}