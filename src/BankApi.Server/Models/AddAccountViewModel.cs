/*
 * BankApi
 *
 * Developer challenge using Swagger and ASP.NET Core
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace BankApi.Server.Models
{
    /// <summary>
    /// </summary>
    [DataContract]
    public class AddAccountViewModel : IEquatable<AddAccountViewModel>
    {
        /// <summary>
        ///     The id of the bank which holds the account
        /// </summary>
        /// <value>The id of the bank which holds the account</value>
        [DataMember(Name = "bank_id")]
        public string BankId { get; set; }

        /// <summary>
        ///     The account number which identifies the bank account
        /// </summary>
        /// <value>The account number which identifies the bank account</value>
        [DataMember(Name = "account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        ///     Returns true if AddAccountViewModel instances are equal
        /// </summary>
        /// <param name="other">Instance of AddAccountViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddAccountViewModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    BankId == other.BankId ||
                    BankId != null &&
                    BankId.Equals(other.BankId)
                ) &&
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddAccountViewModel {\n");
            sb.Append("  BankId: ").Append(BankId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AddAccountViewModel) obj);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (BankId != null)
                    hashCode = hashCode * 59 + BankId.GetHashCode();
                if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(AddAccountViewModel left, AddAccountViewModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AddAccountViewModel left, AddAccountViewModel right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}