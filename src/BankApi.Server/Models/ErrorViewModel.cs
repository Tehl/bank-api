/*
 * BankApi
 *
 * Developer challenge using Swagger and ASP.NET Core
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace BankApi.Server.Models
{
    /// <summary>
    /// </summary>
    [DataContract]
    public class ErrorViewModel : IEquatable<ErrorViewModel>
    {
        /// <summary>
        ///     A message that descibes the error
        /// </summary>
        /// <value>A message that descibes the error</value>
        [DataMember(Name = "message")]
        public string Message { get; set; }

        /// <summary>
        ///     The status of the error (should match http status code in response)
        /// </summary>
        /// <value>The status of the error (should match http status code in response)</value>
        [DataMember(Name = "status")]
        public int? Status { get; set; }

        /// <summary>
        ///     The error code to quote or any correspodence with supprort
        /// </summary>
        /// <value>The error code to quote or any correspodence with supprort</value>
        [DataMember(Name = "errorCode")]
        public long? ErrorCode { get; set; }

        /// <summary>
        ///     Returns true if ErrorViewModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ErrorViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorViewModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) &&
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) &&
                (
                    ErrorCode == other.ErrorCode ||
                    ErrorCode != null &&
                    ErrorCode.Equals(other.ErrorCode)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorViewModel {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ErrorViewModel) obj);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (ErrorCode != null)
                    hashCode = hashCode * 59 + ErrorCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(ErrorViewModel left, ErrorViewModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ErrorViewModel left, ErrorViewModel right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}