/*
 * BankApi
 *
 * Developer challenge using Swagger and ASP.NET Core
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace BankApi.Server.Models
{
    /// <summary>
    /// </summary>
    [DataContract]
    public class AccountDetailsViewModel : IEquatable<AccountDetailsViewModel>
    {
        /// <summary>
        ///     The id of the bank account
        /// </summary>
        /// <value>The id of the bank account</value>
        [DataMember(Name = "account_id")]
        public int? AccountId { get; set; }

        /// <summary>
        ///     The id of the bank which holds the account
        /// </summary>
        /// <value>The id of the bank which holds the account</value>
        [DataMember(Name = "bank_id")]
        public string BankId { get; set; }

        /// <summary>
        ///     The account number which identifies the bank account
        /// </summary>
        /// <value>The account number which identifies the bank account</value>
        [DataMember(Name = "account_number")]
        public string AccountNumber { get; set; }

        /// <summary>
        ///     The sort code of the bank account
        /// </summary>
        /// <value>The sort code of the bank account</value>
        [DataMember(Name = "sort_code")]
        public string SortCode { get; set; }

        /// <summary>
        ///     The name of the bank account
        /// </summary>
        /// <value>The name of the bank account</value>
        [DataMember(Name = "account_name")]
        public string AccountName { get; set; }

        /// <summary>
        ///     The current balance of the bank account
        /// </summary>
        /// <value>The current balance of the bank account</value>
        [DataMember(Name = "current_balance")]
        public double? CurrentBalance { get; set; }

        /// <summary>
        ///     The overdraft limit of the bank account
        /// </summary>
        /// <value>The overdraft limit of the bank account</value>
        [DataMember(Name = "overdraft_limit")]
        public double? OverdraftLimit { get; set; }

        /// <summary>
        ///     Returns true if AccountDetailsViewModel instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountDetailsViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDetailsViewModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) &&
                (
                    BankId == other.BankId ||
                    BankId != null &&
                    BankId.Equals(other.BankId)
                ) &&
                (
                    AccountNumber == other.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(other.AccountNumber)
                ) &&
                (
                    SortCode == other.SortCode ||
                    SortCode != null &&
                    SortCode.Equals(other.SortCode)
                ) &&
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) &&
                (
                    CurrentBalance == other.CurrentBalance ||
                    CurrentBalance != null &&
                    CurrentBalance.Equals(other.CurrentBalance)
                ) &&
                (
                    OverdraftLimit == other.OverdraftLimit ||
                    OverdraftLimit != null &&
                    OverdraftLimit.Equals(other.OverdraftLimit)
                );
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountDetailsViewModel {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  BankId: ").Append(BankId).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  SortCode: ").Append(SortCode).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  CurrentBalance: ").Append(CurrentBalance).Append("\n");
            sb.Append("  OverdraftLimit: ").Append(OverdraftLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountDetailsViewModel) obj);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                if (BankId != null)
                    hashCode = hashCode * 59 + BankId.GetHashCode();
                if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                if (SortCode != null)
                    hashCode = hashCode * 59 + SortCode.GetHashCode();
                if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                if (CurrentBalance != null)
                    hashCode = hashCode * 59 + CurrentBalance.GetHashCode();
                if (OverdraftLimit != null)
                    hashCode = hashCode * 59 + OverdraftLimit.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(AccountDetailsViewModel left, AccountDetailsViewModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountDetailsViewModel left, AccountDetailsViewModel right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}