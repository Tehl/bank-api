/* 
 * FairWayBank
 *
 * FairWayBank Accounts + Transactions API
 *
 * OpenAPI spec version: v1
 * Contact: development@bizfitech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace IO.Swagger.Model
{
    /// <summary>
    ///     OverdraftViewModel
    /// </summary>
    [DataContract]
    public class OverdraftViewModel : IEquatable<OverdraftViewModel>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="OverdraftViewModel" /> class.
        /// </summary>
        /// <param name="Amount">The amount of the overdragt.</param>
        public OverdraftViewModel(double? Amount = default(double?))
        {
            this.Amount = Amount;
        }

        /// <summary>
        ///     The amount of the overdragt
        /// </summary>
        /// <value>The amount of the overdragt</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public double? Amount { get; set; }

        /// <summary>
        ///     Returns true if OverdraftViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of OverdraftViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OverdraftViewModel input)
        {
            if (input == null)
                return false;

            return
                Amount == input.Amount ||
                Amount != null &&
                Amount.Equals(input.Amount);
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OverdraftViewModel {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as OverdraftViewModel);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                return hashCode;
            }
        }
    }
}