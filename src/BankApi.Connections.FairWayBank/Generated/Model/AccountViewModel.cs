/* 
 * FairWayBank
 *
 * FairWayBank Accounts + Transactions API
 *
 * OpenAPI spec version: v1
 * Contact: development@bizfitech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace BankApi.Connections.FairWayBank.Generated.Model
{
    /// <summary>
    ///     AccountViewModel
    /// </summary>
    [DataContract]
    public class AccountViewModel : IEquatable<AccountViewModel>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="AccountViewModel" /> class.
        /// </summary>
        /// <param name="Name">The name of the account.</param>
        /// <param name="Identifier">The identifier of the account.</param>
        public AccountViewModel(string Name = default(string),
            AccountIdentifierViewModel Identifier = default(AccountIdentifierViewModel))
        {
            this.Name = Name;
            this.Identifier = Identifier;
        }

        /// <summary>
        ///     The name of the account
        /// </summary>
        /// <value>The name of the account</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     The identifier of the account
        /// </summary>
        /// <value>The identifier of the account</value>
        [DataMember(Name = "identifier", EmitDefaultValue = false)]
        public AccountIdentifierViewModel Identifier { get; set; }

        /// <summary>
        ///     Returns true if AccountViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountViewModel input)
        {
            if (input == null)
                return false;

            return
                (
                    Name == input.Name ||
                    Name != null &&
                    Name.Equals(input.Name)
                ) &&
                (
                    Identifier == input.Identifier ||
                    Identifier != null &&
                    Identifier.Equals(input.Identifier)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountViewModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as AccountViewModel);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Identifier != null)
                    hashCode = hashCode * 59 + Identifier.GetHashCode();
                return hashCode;
            }
        }
    }
}