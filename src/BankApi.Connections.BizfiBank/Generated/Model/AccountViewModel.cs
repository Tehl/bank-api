/* 
 * BizfiBank
 *
 * BizfiBank Accounts + Transactions API
 *
 * OpenAPI spec version: v1
 * Contact: development@bizfitech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace BankApi.Connections.BizfiBank.Generated.Model
{
    /// <summary>
    ///     AccountViewModel
    /// </summary>
    [DataContract]
    public class AccountViewModel : IEquatable<AccountViewModel>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="AccountViewModel" /> class.
        /// </summary>
        /// <param name="AccountName">The name of the account.</param>
        /// <param name="AccountNumber">The account number of the account.</param>
        /// <param name="SortCode">The sort code of the account.</param>
        /// <param name="Balance">The account&#39;s balance.</param>
        /// <param name="AvailableBalance">The account&#39;s available balance.</param>
        /// <param name="Overdraft">The account&#39;s overdraft (optional).</param>
        public AccountViewModel(string AccountName = default(string), string AccountNumber = default(string),
            string SortCode = default(string), double? Balance = default(double?),
            double? AvailableBalance = default(double?), double? Overdraft = default(double?))
        {
            this.AccountName = AccountName;
            this.AccountNumber = AccountNumber;
            this.SortCode = SortCode;
            this.Balance = Balance;
            this.AvailableBalance = AvailableBalance;
            this.Overdraft = Overdraft;
        }

        /// <summary>
        ///     The name of the account
        /// </summary>
        /// <value>The name of the account</value>
        [DataMember(Name = "account_name", EmitDefaultValue = false)]
        public string AccountName { get; set; }

        /// <summary>
        ///     The account number of the account
        /// </summary>
        /// <value>The account number of the account</value>
        [DataMember(Name = "account_number", EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        ///     The sort code of the account
        /// </summary>
        /// <value>The sort code of the account</value>
        [DataMember(Name = "sort_code", EmitDefaultValue = false)]
        public string SortCode { get; set; }

        /// <summary>
        ///     The account&#39;s balance
        /// </summary>
        /// <value>The account&#39;s balance</value>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public double? Balance { get; set; }

        /// <summary>
        ///     The account&#39;s available balance
        /// </summary>
        /// <value>The account&#39;s available balance</value>
        [DataMember(Name = "available_balance", EmitDefaultValue = false)]
        public double? AvailableBalance { get; set; }

        /// <summary>
        ///     The account&#39;s overdraft (optional)
        /// </summary>
        /// <value>The account&#39;s overdraft (optional)</value>
        [DataMember(Name = "overdraft", EmitDefaultValue = false)]
        public double? Overdraft { get; set; }

        /// <summary>
        ///     Returns true if AccountViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountViewModel input)
        {
            if (input == null)
                return false;

            return
                (
                    AccountName == input.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(input.AccountName)
                ) &&
                (
                    AccountNumber == input.AccountNumber ||
                    AccountNumber != null &&
                    AccountNumber.Equals(input.AccountNumber)
                ) &&
                (
                    SortCode == input.SortCode ||
                    SortCode != null &&
                    SortCode.Equals(input.SortCode)
                ) &&
                (
                    Balance == input.Balance ||
                    Balance != null &&
                    Balance.Equals(input.Balance)
                ) &&
                (
                    AvailableBalance == input.AvailableBalance ||
                    AvailableBalance != null &&
                    AvailableBalance.Equals(input.AvailableBalance)
                ) &&
                (
                    Overdraft == input.Overdraft ||
                    Overdraft != null &&
                    Overdraft.Equals(input.Overdraft)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountViewModel {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  SortCode: ").Append(SortCode).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  AvailableBalance: ").Append(AvailableBalance).Append("\n");
            sb.Append("  Overdraft: ").Append(Overdraft).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as AccountViewModel);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                if (AccountNumber != null)
                    hashCode = hashCode * 59 + AccountNumber.GetHashCode();
                if (SortCode != null)
                    hashCode = hashCode * 59 + SortCode.GetHashCode();
                if (Balance != null)
                    hashCode = hashCode * 59 + Balance.GetHashCode();
                if (AvailableBalance != null)
                    hashCode = hashCode * 59 + AvailableBalance.GetHashCode();
                if (Overdraft != null)
                    hashCode = hashCode * 59 + Overdraft.GetHashCode();
                return hashCode;
            }
        }
    }
}