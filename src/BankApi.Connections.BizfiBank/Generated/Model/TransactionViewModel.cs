/* 
 * BizfiBank
 *
 * BizfiBank Accounts + Transactions API
 *
 * OpenAPI spec version: v1
 * Contact: development@bizfitech.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace BankApi.Connections.BizfiBank.Generated.Model
{
    /// <summary>
    ///     TransactionViewModel
    /// </summary>
    [DataContract]
    public class TransactionViewModel : IEquatable<TransactionViewModel>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="TransactionViewModel" /> class.
        /// </summary>
        /// <param name="Amount">The amount of the transaction.</param>
        /// <param name="Merchant">The merchant of the transaction.</param>
        /// <param name="ClearedDate">The date the transaction cleared.</param>
        public TransactionViewModel(double? Amount = default(double?), string Merchant = default(string),
            DateTime? ClearedDate = default(DateTime?))
        {
            this.Amount = Amount;
            this.Merchant = Merchant;
            this.ClearedDate = ClearedDate;
        }

        /// <summary>
        ///     The amount of the transaction
        /// </summary>
        /// <value>The amount of the transaction</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public double? Amount { get; set; }

        /// <summary>
        ///     The merchant of the transaction
        /// </summary>
        /// <value>The merchant of the transaction</value>
        [DataMember(Name = "merchant", EmitDefaultValue = false)]
        public string Merchant { get; set; }

        /// <summary>
        ///     The date the transaction cleared
        /// </summary>
        /// <value>The date the transaction cleared</value>
        [DataMember(Name = "cleared_date", EmitDefaultValue = false)]
        public DateTime? ClearedDate { get; set; }

        /// <summary>
        ///     Returns true if TransactionViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionViewModel input)
        {
            if (input == null)
                return false;

            return
                (
                    Amount == input.Amount ||
                    Amount != null &&
                    Amount.Equals(input.Amount)
                ) &&
                (
                    Merchant == input.Merchant ||
                    Merchant != null &&
                    Merchant.Equals(input.Merchant)
                ) &&
                (
                    ClearedDate == input.ClearedDate ||
                    ClearedDate != null &&
                    ClearedDate.Equals(input.ClearedDate)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionViewModel {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Merchant: ").Append(Merchant).Append("\n");
            sb.Append("  ClearedDate: ").Append(ClearedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TransactionViewModel);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                if (Merchant != null)
                    hashCode = hashCode * 59 + Merchant.GetHashCode();
                if (ClearedDate != null)
                    hashCode = hashCode * 59 + ClearedDate.GetHashCode();
                return hashCode;
            }
        }
    }
}